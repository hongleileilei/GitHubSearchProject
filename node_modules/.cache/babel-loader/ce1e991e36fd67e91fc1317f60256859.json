{"ast":null,"code":"'use strict';\n\nvar ConstantInfiniteComputer = require('../computers/constantInfiniteComputer.js');\n\nvar ArrayInfiniteComputer = require('../computers/arrayInfiniteComputer.js');\n\nvar React = global.React || require('react');\n\nfunction createInfiniteComputer(data, children) {\n  var computer;\n  var numberOfChildren = React.Children.count(children); // This should be guaranteed by checkProps\n\n  if (Array.isArray(data)) {\n    computer = new ArrayInfiniteComputer(data, numberOfChildren);\n  } else {\n    computer = new ConstantInfiniteComputer(data, numberOfChildren);\n  }\n\n  return computer;\n} // Given the scrollTop of the container, computes the state the\n// component should be in. The goal is to abstract all of this\n// from any actual representation in the DOM.\n// The window is the block with any preloadAdditionalHeight\n// added to it.\n\n\nfunction recomputeApertureStateFromOptionsAndScrollTop(_ref, scrollTop) {\n  var preloadBatchSize = _ref.preloadBatchSize;\n  var preloadAdditionalHeight = _ref.preloadAdditionalHeight;\n  var infiniteComputer = _ref.infiniteComputer;\n  return function () {\n    var blockNumber = preloadBatchSize === 0 ? 0 : Math.floor(scrollTop / preloadBatchSize),\n        blockStart = preloadBatchSize * blockNumber,\n        blockEnd = blockStart + preloadBatchSize,\n        apertureTop = Math.max(0, blockStart - preloadAdditionalHeight),\n        apertureBottom = Math.min(infiniteComputer.getTotalScrollableHeight(), blockEnd + preloadAdditionalHeight);\n    return {\n      displayIndexStart: infiniteComputer.getDisplayIndexStart(apertureTop),\n      displayIndexEnd: infiniteComputer.getDisplayIndexEnd(apertureBottom)\n    };\n  }();\n}\n\nmodule.exports = {\n  createInfiniteComputer: createInfiniteComputer,\n  recomputeApertureStateFromOptionsAndScrollTop: recomputeApertureStateFromOptionsAndScrollTop\n};","map":{"version":3,"sources":["/Users/liuhonglei/Desktop/Projects/blabla0510/GitHubSearchProject/node_modules/react-infinite/build/utils/infiniteHelpers.js"],"names":["ConstantInfiniteComputer","require","ArrayInfiniteComputer","React","global","createInfiniteComputer","data","children","computer","numberOfChildren","Children","count","Array","isArray","recomputeApertureStateFromOptionsAndScrollTop","_ref","scrollTop","preloadBatchSize","preloadAdditionalHeight","infiniteComputer","blockNumber","Math","floor","blockStart","blockEnd","apertureTop","max","apertureBottom","min","getTotalScrollableHeight","displayIndexStart","getDisplayIndexStart","displayIndexEnd","getDisplayIndexEnd","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,wBAAwB,GAAGC,OAAO,CAAC,0CAAD,CAAtC;;AACA,IAAIC,qBAAqB,GAAGD,OAAO,CAAC,uCAAD,CAAnC;;AACA,IAAIE,KAAK,GAAGC,MAAM,CAACD,KAAP,IAAgBF,OAAO,CAAC,OAAD,CAAnC;;AAEA,SAASI,sBAAT,CAAgCC,IAAhC,EAAsCC,QAAtC,EAAgD;AAC9C,MAAIC,QAAJ;AACA,MAAIC,gBAAgB,GAAGN,KAAK,CAACO,QAAN,CAAeC,KAAf,CAAqBJ,QAArB,CAAvB,CAF8C,CAI9C;;AACA,MAAIK,KAAK,CAACC,OAAN,CAAcP,IAAd,CAAJ,EAAyB;AACvBE,IAAAA,QAAQ,GAAG,IAAIN,qBAAJ,CAA0BI,IAA1B,EAAgCG,gBAAhC,CAAX;AACD,GAFD,MAEO;AACLD,IAAAA,QAAQ,GAAG,IAAIR,wBAAJ,CAA6BM,IAA7B,EAAmCG,gBAAnC,CAAX;AACD;;AACD,SAAOD,QAAP;AACD,C,CAED;AACA;AACA;AACA;AACA;;;AACA,SAASM,6CAAT,CAAuDC,IAAvD,EAA6DC,SAA7D,EAAwE;AACtE,MAAIC,gBAAgB,GAAGF,IAAI,CAACE,gBAA5B;AACA,MAAIC,uBAAuB,GAAGH,IAAI,CAACG,uBAAnC;AACA,MAAIC,gBAAgB,GAAGJ,IAAI,CAACI,gBAA5B;AACA,SAAQ,YAAY;AAClB,QAAIC,WAAW,GAAGH,gBAAgB,KAAK,CAArB,GAAyB,CAAzB,GAA6BI,IAAI,CAACC,KAAL,CAAWN,SAAS,GAAGC,gBAAvB,CAA/C;AAAA,QACIM,UAAU,GAAGN,gBAAgB,GAAGG,WADpC;AAAA,QAEII,QAAQ,GAAGD,UAAU,GAAGN,gBAF5B;AAAA,QAGIQ,WAAW,GAAGJ,IAAI,CAACK,GAAL,CAAS,CAAT,EAAYH,UAAU,GAAGL,uBAAzB,CAHlB;AAAA,QAIIS,cAAc,GAAGN,IAAI,CAACO,GAAL,CAAST,gBAAgB,CAACU,wBAAjB,EAAT,EAAsDL,QAAQ,GAAGN,uBAAjE,CAJrB;AAMA,WAAO;AACLY,MAAAA,iBAAiB,EAAEX,gBAAgB,CAACY,oBAAjB,CAAsCN,WAAtC,CADd;AAELO,MAAAA,eAAe,EAAEb,gBAAgB,CAACc,kBAAjB,CAAoCN,cAApC;AAFZ,KAAP;AAID,GAXM,EAAP;AAYD;;AAEDO,MAAM,CAACC,OAAP,GAAiB;AACf9B,EAAAA,sBAAsB,EAAEA,sBADT;AAEfS,EAAAA,6CAA6C,EAAEA;AAFhC,CAAjB","sourcesContent":["'use strict';\n\nvar ConstantInfiniteComputer = require('../computers/constantInfiniteComputer.js');\nvar ArrayInfiniteComputer = require('../computers/arrayInfiniteComputer.js');\nvar React = global.React || require('react');\n\nfunction createInfiniteComputer(data, children) {\n  var computer;\n  var numberOfChildren = React.Children.count(children);\n\n  // This should be guaranteed by checkProps\n  if (Array.isArray(data)) {\n    computer = new ArrayInfiniteComputer(data, numberOfChildren);\n  } else {\n    computer = new ConstantInfiniteComputer(data, numberOfChildren);\n  }\n  return computer;\n}\n\n// Given the scrollTop of the container, computes the state the\n// component should be in. The goal is to abstract all of this\n// from any actual representation in the DOM.\n// The window is the block with any preloadAdditionalHeight\n// added to it.\nfunction recomputeApertureStateFromOptionsAndScrollTop(_ref, scrollTop) {\n  var preloadBatchSize = _ref.preloadBatchSize;\n  var preloadAdditionalHeight = _ref.preloadAdditionalHeight;\n  var infiniteComputer = _ref.infiniteComputer;\n  return (function () {\n    var blockNumber = preloadBatchSize === 0 ? 0 : Math.floor(scrollTop / preloadBatchSize),\n        blockStart = preloadBatchSize * blockNumber,\n        blockEnd = blockStart + preloadBatchSize,\n        apertureTop = Math.max(0, blockStart - preloadAdditionalHeight),\n        apertureBottom = Math.min(infiniteComputer.getTotalScrollableHeight(), blockEnd + preloadAdditionalHeight);\n\n    return {\n      displayIndexStart: infiniteComputer.getDisplayIndexStart(apertureTop),\n      displayIndexEnd: infiniteComputer.getDisplayIndexEnd(apertureBottom)\n    };\n  })();\n}\n\nmodule.exports = {\n  createInfiniteComputer: createInfiniteComputer,\n  recomputeApertureStateFromOptionsAndScrollTop: recomputeApertureStateFromOptionsAndScrollTop\n};"]},"metadata":{},"sourceType":"script"}