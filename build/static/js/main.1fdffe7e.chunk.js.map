{"version":3,"sources":["components/App.jsx","components/Search.jsx","components/User.jsx","components/GithubUser.jsx","components/Followers.jsx","components/Following.jsx","components/GithubRepo.jsx","components/Repos.jsx","index.js"],"names":["App","React","Component","render","className","to","this","props","children","Search","constructor","super","_handleSubmit","bind","e","preventDefault","history","push","refs","userInput","value","onSubmit","ref","type","placeholder","User","state","fetchData","fetch","params","username","then","response","json","user","setState","componentDidMount","componentDidUpdate","prevProps","prevState","renderStat","stat","key","name","url","stats","public_repos","followers","following","login","src","avatar_url","alt","bio","map","GithubUser","Followers","loading","page","followersResponse","mergedArray","concat","isInfiniteLoading","onInfiniteLoad","useWindowAsScrollContainer","elementHeight","infiniteLoadBeginEdgeOffset","follower","id","Following","followingResponse","followed","FontAwesome","require","GithubRepo","href","stargazers","Repos","reposResponse","repos","repo","full_name","stargazers_count","routes","browserHistory","path","component","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.1fdffe7e.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router';\n\nclass App extends React.Component {\n    \n    render() {\n        return (\n            <div className=\"main-app\">\n                <header className=\"main-header\">\n                    <h1><Link to=\"/\">Github Searcher</Link></h1>\n                </header>\n                <main className=\"main-content\">\n                    {this.props.children}\n                </main> \n            </div>\n            \n        );\n    }\n};\n\nexport default App;\n","import React from 'react';\nimport { browserHistory as history } from 'react-router';\n\nclass Search extends React.Component {\n    constructor(props) {\n        super(props);\n        this._handleSubmit = this._handleSubmit.bind(this);\n    }\n    _handleSubmit(e) {\n        e.preventDefault();\n        history.push(`/user/${this.refs.userInput.value}`);\n    }\n\n    render() {\n        return (\n            <div className=\"search-page\">\n                <h2 className=\"second-heading\"></h2>\n                <form onSubmit={this._handleSubmit}>\n                    <input ref=\"userInput\" className=\"search-page__input\" type=\"text\" placeholder=\"Enter a Username\" />\n                    <button className=\"search-page__button\">Search</button>\n                </form>\n                <h2 className=\"search-arrow\"></h2>\n            </div>\n        );\n    }\n}\n\nexport default Search;","import React from 'react';\nimport { Link } from 'react-router';\n\nclass User extends React.Component {\n    constructor() {\n        super();\n        this.state = {};\n    }\n    fetchData() {\n        fetch(`https://api.github.com/users/${this.props.params.username}`)\n        .then(response => response.json())\n        .then(\n            user => {\n                this.setState({\n                    user: user\n                });\n            }\n        );\n    }\n    \n    componentDidMount() {\n        this.fetchData();\n    }\n    \n    componentDidUpdate(prevProps, prevState) {\n        if (prevProps.params.username !== this.props.params.username) { \n          this.fetchData();\n      }\n    }\n\n    renderStat(stat) {\n        return (\n            <li key={stat.name} className=\"user-info__stat\">\n                <Link to={stat.url} className=\"stat\">\n                    <p className=\"user-info__stat-value\">{stat.value}</p>\n                    <p className=\"user-info__stat-name\">{stat.name}</p>\n                </Link>\n            </li>\n        );\n    }\n\n    render() {\n        if (!this.state.user) {\n            return (<div className=\"user-page\">LOADING...</div>);\n        }\n\n        const user = this.state.user;\n\n        const stats = [\n            {\n                name: 'Public Repos',\n                value: user.public_repos,\n                url: `/user/${this.props.params.username}/repos`\n            },\n            {\n                name: 'Followers',\n                value: user.followers,\n                url: `/user/${this.props.params.username}/followers`\n            },\n            {\n                name: 'Following',\n                value: user.following,\n                url: `/user/${this.props.params.username}/following`\n            }\n        ];\n\n        return (\n            <div className=\"user-page\">\n                <div className=\"user-info\">\n                    <Link className=\"user-info__text\" to={`/user/${user.login}`}>\n                        <img className=\"user-info__avatar\" src={user.avatar_url} alt={`${user.login} avatar`}/>\n                        <h2 className=\"user-info__title\">{user.login} ({user.name})</h2>\n                        <p className=\"user-info__bio\">{user.bio}</p>\n                    </Link>\n\n                    <ul className=\"user-info__stats\">\n                        {stats.map(this.renderStat)}\n                    </ul>\n                </div>\n                {this.props.children}\n            </div>\n        );\n    }\n};\n\nexport default User;\n","\nimport React from 'react';\nimport { Link } from 'react-router';\n\nclass GithubUser extends React.Component {\n    \n    render() {\n        return (\n        <div>\n            <Link className=\"githubUserLink\" to={`/user/${this.props.user}`}>\n                <div className=\"githubUserDisplay\">\n                    <img className=\"githubUser-avatar\" src={this.props.avatar_url} alt={`${this.props.user} avatar`} />\n                    <h2 className=\"githubUser-name\">{this.props.user}</h2>\n                </div>    \n            </Link>\n        </div>\n        );\n    }\n}\nexport default GithubUser;\n\n","import React from 'react';\nimport GithubUser from './GithubUser';\nimport Infinite from 'react-infinite';\n\nclass Followers extends React.Component {\n\n constructor() {\n    super();\n    this.state = {\n      page: 1,\n      loading: false,\n      followers: []\n    };\n}\n\n fetchData = () => {\n\n   this.setState({\n      loading: true\n    });\n    fetch(`https://api.github.com/users/${this.props.params.username}/followers?&page=${this.state.page}&per_page=50`)\n      .then(response => response.json())\n      .then(\n        followersResponse => {\n         let mergedArray = this.state.followers.concat(followersResponse);\n          this.setState({\n            followers: mergedArray,\n            page: this.state.page + 1,\n            loading: false\n          });\n        }\n      );\n\n  }\n\n\n componentDidUpdate(prevProps, prevState) {\n    if (prevProps.params.username !== this.props.params.username) {\n      this.fetchData();\n    }\n  }\n\n render() {\n    return (\n      <div className=\"followers-page\">\n        <h3>Followers of {this.props.params.username}</h3>\n        <div className=\"Infinite-scroll-followers\">\n            <Infinite className=\"followers-page-infinite\"\n                      isInfiniteLoading={this.state.loading}\n                      onInfiniteLoad={this.fetchData.bind(this)}\n                      useWindowAsScrollContainer\n                      elementHeight={100}\n                      infiniteLoadBeginEdgeOffset={100} >\n                {this.state.followers.map(follower => {\n                      return <GithubUser user={follower.login} key={follower.id} avatar_url={follower.avatar_url} /> \n                    \n                }\n                )} \n            </Infinite>\n        </div>\n      </div>\n    );\n  }\n}\nexport default Followers;","import React from 'react';\nimport GithubUser from './GithubUser';\nimport Infinite from 'react-infinite';\n\nclass Following extends React.Component {\n\n constructor() {\n    super();\n    this.state = {\n      page: 1,\n      loading: false,\n      following: []\n    };\n}\n\n fetchData = () => {\n\n   this.setState({\n      loading: true\n    });\n    fetch(`https://api.github.com/users/${this.props.params.username}/following?&page=${this.state.page}&per_page=50`)\n      .then(response => response.json())\n      .then(\n        followingResponse => {\n         let mergedArray = this.state.following.concat(followingResponse);\n          this.setState({\n            following: mergedArray,\n            page: this.state.page + 1,\n            loading: false\n          });\n        }\n      );\n\n  }\n\n componentDidUpdate(prevProps, prevState) {\n    if (prevProps.params.username !== this.props.params.username) {\n      this.fetchData();\n    }\n  }\n\n render() {\n    return (\n      <div className=\"following-page\">\n        <h3>Followed by {this.props.params.username}</h3>\n        <div className=\"Infinite-scroll-following\">\n            <Infinite className=\"following-page-infinite\"\n                      isInfiniteLoading={this.state.loading}\n                      onInfiniteLoad={this.fetchData.bind(this)}\n                      useWindowAsScrollContainer\n                      elementHeight={100}\n                      infiniteLoadBeginEdgeOffset={100} >\n                {this.state.following.map(followed => {\n                      return <GithubUser user={followed.login} key={followed.id} avatar_url={followed.avatar_url} /> \n                    \n                }\n                )} \n            </Infinite>\n        </div>\n      </div>\n    );\n  }\n}\nexport default Following;","import React from 'react';\nvar FontAwesome = require('react-fontawesome');\n\nclass GithubRepo extends React.Component {\n\n    render() {\n        return (\n        \n            \n            <div className=\"githubReposDisplay\">\n                <a href={`https://github.com/${this.props.name}`} className=\"githubRepoLink\" >\n                <h2 className=\"githubRepoName\">{this.props.name}</h2>\n                </a>\n                <a href={`https://github.com/${this.props.name}/stargazers`} className=\"repoStargazers\">\n                <p>{this.props.stargazers} <FontAwesome name='star' /></p> \n                </a>    \n            </div>    \n        );\n    }\n}\nexport default GithubRepo;","import React from 'react';\nimport GithubRepo from './GithubRepo';\nimport Infinite from 'react-infinite';\n\nclass Repos extends React.Component {\n\n constructor() {\n    super();\n    this.state = {\n      page: 1,\n      loading: false,\n      repos: []\n    };\n}\n\n fetchData = () => {\n\n   this.setState({\n      loading: true\n    });\n    fetch(`https://api.github.com/users/${this.props.params.username}/repos?&page=${this.state.page}&per_page=50`)\n      .then(response => response.json())\n      .then(\n        reposResponse => {\n         let mergedArray = this.state.repos.concat(reposResponse);\n          this.setState({\n            repos: mergedArray,\n            page: this.state.page + 1,\n            loading: false\n          });\n        }\n      );\n\n  }\n\n componentDidUpdate(prevProps, prevState) {\n    if (prevProps.params.username !== this.props.params.username) {\n      this.fetchData();\n    }\n  }\n\n render() {\n\n    return (\n      <div className=\"repos-page\">\n        <h3>Public Repositories by {this.props.params.username}</h3>\n        <div className=\"Infinite-scroll-repos\">\n            <Infinite className=\"repos-page-infinite\"\n                      isInfiniteLoading={this.state.loading}\n                      onInfiniteLoad={this.fetchData.bind(this)}\n                      useWindowAsScrollContainer\n                      elementHeight={50}\n                      infiniteLoadBeginEdgeOffset={100} >\n                {this.state.repos.map(repo => {\n                    return (\n                      <div className=\"RepoStyle\" key={repo.id}>\n                            <GithubRepo name={repo.full_name} stargazers={repo.stargazers_count}/>  \n                      </div>\n                    \n                )}\n                )} \n            </Infinite>\n        </div>\n      </div>\n    );\n  }\n}\nexport default Repos;","import './index.css';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Router, Route, IndexRoute, browserHistory } from 'react-router';\n\nimport App from './components/App';\nimport Search from './components/Search';\nimport User from './components/User';\nimport Followers from './components/Followers';\nimport Following from './components/Following';\nimport Repos from './components/Repos';\n\nconst routes = (\n    <Router history={browserHistory}>\n        <Route path=\"/\" component={App}>\n            <IndexRoute component={Search}/>\n            <Route path=\"user/:username\" component={User}>\n                <Route path=\"followers\" component={Followers} />\n                <Route path=\"following\" component={Following} />\n                <Route path=\"repos\" component={Repos} />\n            </Route>\n        </Route>\n    </Router>\n);\n\nReactDOM.render(routes, document.getElementById('root'));"],"sourceRoot":""}